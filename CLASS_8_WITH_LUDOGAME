{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1wlGO5P4Fzm6xroVrL4SexLjAlVtjWXNw",
      "authorship_tag": "ABX9TyPMLdnzyfMnFeNXIl+xFHt2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FAIZANAAZ/PYTHON/blob/main/CLASS_8_WITH_LUDOGAME\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "a6OY8JeJkt-Y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6c083dc0-e4b2-4443-dd55-6c25c5deaef2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " hello faiza\n"
          ]
        }
      ],
      "source": [
        "from re import S\n",
        "# txt ki file hm text ke liye use krty hen jesy nodepad\n",
        "file = open(\"faiza_naaz_queen.txt\", \"w+\")# w+ ka matlb he ke kis form me kri he open yani hmy bnani he ya read krni he ya update bydefaul wo read pr hota he\n",
        "# +ka nishan isi liye lgaty hen ke write krny ke badread bhi krna he\n",
        "# isy file pen ho jaygi or file mojood hi na ho to wo creat ho jaygi\n",
        "file.write(\"\\n hello faiza\")\n",
        "# write matlb hmny jo fike bnai thi osmy koch likh diya he add kr diya he file mree mojood sab text ko delete krdega or bs ye jo write me likha he ye rakhyga lekin\n",
        "# hm chahty hen ke wo bhi rhy or ye bhi add hoto hm use krengy append() ko\n",
        "\n",
        "file.seek(0)\n",
        "\n",
        "\n",
        "    # \"seek(0)\" jb hm write krky read krty hen to wo on chizon ko reasd krky print ktyga jo curser ke bad hota he or curser\n",
        "    # khod sy end me chaa jata he to koch print hi nhi hoa to hm seek 0 likhengy ke files ke bhi apny index number hoty he\n",
        "    # seek ye krta he ke curser ki position ko set krta he to seek (0) ka matlb he ke curser ko 0 index pr set krdo to\n",
        "    # 0 to sbsy phla hota he word to wo sbsy phly jayga or wha curser rakh dega to wo curser apny bad wala sb print krdega\n",
        "\n",
        "line=file.read()\n",
        "file.write(\"hello faiza\")\n",
        "print(line)\n",
        "#\n",
        "file.close()\n",
        "# close krna lazmi he wrna ye open rhygi o msa hoga\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uoJql-unRg5M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "GSvMAnwTlD8M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# \"with open\" ka use kar ke file ko open kar rahe hain\n",
        "# with open se ye bhi hota he ke hmy isko close nhi krna prhta\n",
        "# Saath hi saath, yeh mode reading (\"r\") aur writing (\"w\") dono allow karta hai.\n",
        "with open(\"faiza_naaz.txt\", \"w+\") as new_file: #ya r+ bhi kr skty or hm ag x likhty hen to wo agr file hogi tohi open hogi agr nhi hogi to nhi hogi\n",
        "\n",
        "    # \"write\" function ka use kar ke file ke andar text likh rahe hain\n",
        "    new_file.write(\"hello faiza\")\n",
        "    new_file.seek(0)\n",
        "\n",
        "    # \"read()\" function ka use kar ke file ka pura content read kar ke print kar rahe hain  write waly work ko hm read ke\n",
        "    # method sy read krty hen\n",
        "    print(new_file.read())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ibODYyF5lFPB",
        "outputId": "6b0ef208-a7e6-4183-df45-91acb847b77f"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello faiza\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"faiza_naaz.txt\", \"a+\") as new_file:  # as krky hmny iso reasign krdiya name or a+ sy ye hoga ke porana text bhi ayga oe jo new likhengy wo bhi sath add hota jayga\n",
        "\n",
        "    # \"write\" function ka use kar ke file ke andar text likh rahe hain\n",
        "    new_file.write(\"\\n hello naaz\")\n",
        "    new_file.seek(0)\n",
        "\n",
        "    # \"read()\" function ka use kar ke file ka pura content read kar ke print kar rahe hain  write waly work ko hm read ke\n",
        "    # method sy read krty hen\n",
        "    print(new_file.read())\n"
      ],
      "metadata": {
        "id": "1tBNz_NTpRYv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "07fe2d42-2125-46c4-c3de-9e5746da59de"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " hello naaz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "# files matlb ye hmy jo sidebar me files hoti he osko acces krny ki ijazat deta he\n",
        "uploaded = files.upload()\n",
        "# isy hm apni file me koch upload krwa rhyhe computer sy ye code likhny sy fileupload krny ka option generat hoga osy hm koch bhi upload krengy\n",
        "# or wo file pic save bhi ho jaygi side me\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "JFrQoGieRkc3",
        "outputId": "66418b9a-416f-4398-e9de-c3aceccea23a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8a493c85-1806-4003-9eff-a641a8967435\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8a493c85-1806-4003-9eff-a641a8967435\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-9272f16dce24>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# files matlb ye hmy jo sidebar me files hoti he osko acces krny ki ijazat deta he\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0muploaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m# isy hm apni file me koch upload krwa rhyhe computer sy ye code likhny sy fileupload krny ka option generat hoga osy hm koch bhi upload krengy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# or wo file pic save bhi ho jaygi side me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m(target_dir)\u001b[0m\n\u001b[1;32m     70\u001b[0m   \"\"\"\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m   \u001b[0;31m# First result is always an indication that the file picker has completed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m   result = _output.eval_js(\n\u001b[0m\u001b[1;32m    165\u001b[0m       'google.colab._files._uploadFiles(\"{input_id}\", \"{output_id}\")'.format(\n\u001b[1;32m    166\u001b[0m           \u001b[0minput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput_id\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result, timeout_sec)\u001b[0m\n\u001b[1;32m     38\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     if (\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: suggest some interesting applications with code for bigners develper\n",
        "\n",
        "from PIL import Image, ImageDraw, ImageFont\n",
        "import random\n",
        "import os\n",
        "\n",
        "def generate_admit_card(name, roll_number, image_path=None):\n",
        "    \"\"\"Generates a customized admit card image.\n",
        "\n",
        "    Args:\n",
        "        name: The student's name.\n",
        "        roll_number: The student's roll number.\n",
        "        image_path: Optional path to an image to include on the card.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        # Create a new image with a light blue background\n",
        "        img = Image.new('RGB', (600, 400), color=(173, 216, 230))\n",
        "        d = ImageDraw.Draw(img)\n",
        "\n",
        "        # Load a font (replace with a font file on your system)\n",
        "        font_path = \"arial.ttf\"  # Or any other .ttf file\n",
        "        if os.path.exists(font_path):\n",
        "            font = ImageFont.truetype(font_path, 20)\n",
        "        else:\n",
        "            font = ImageFont.load_default()\n",
        "\n",
        "        # Add text elements\n",
        "        d.text((50, 50), \"PIAIC Admit Card\", font=font, fill=(0, 0, 0))\n",
        "        d.text((50, 100), f\"Name: {name}\", font=font, fill=(0, 0, 139))  # Dark blue\n",
        "        d.text((50, 150), f\"Roll Number: {roll_number}\", font=font, fill=(139, 0, 0))  # Dark red\n",
        "        d.line([(50, 180), (550, 180)], fill=(0, 0, 0), width=2)\n",
        "\n",
        "        # Add an image if provided\n",
        "        if image_path and os.path.exists(image_path):\n",
        "            try:\n",
        "                random_image = Image.open(image_path)\n",
        "                random_image = random_image.resize((100, 100))\n",
        "                img.paste(random_image, (400, 250))\n",
        "            except Exception as e:  # Catch potential image errors\n",
        "                print(f\"Error loading or pasting image: {e}\")\n",
        "                d.text((400, 250), \"Image Error\", font=font, fill=(0, 0, 0))\n",
        "        elif image_path:\n",
        "          print(f\"Image file not found: {image_path}\")\n",
        "          d.text((400, 250), \"Image not found\", font=font, fill=(0,0,0))\n",
        "\n",
        "\n",
        "        # Save the image (replace with your desired path)\n",
        "        img.save(\"admit_card.png\")\n",
        "        print(\"Admit card saved as admit_card.png\")\n",
        "\n",
        "        # Display the image (optional)\n",
        "        # img.show()  # This might not work in all environments (Colab)\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {e}\")\n",
        "\n",
        "\n",
        "# Example usage:\n",
        "generate_admit_card(\"Alice Johnson\", \"2023-AIC-007\", \"random_image.jpg\") # Replace with an existing image file\n",
        "\n",
        "# Example without an image:\n",
        "generate_admit_card(\"Bob Williams\", \"2023-AIC-008\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "40lAEqd13d5L",
        "outputId": "07b36f7f-2dfb-4623-be9b-b976597af79c"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Image file not found: random_image.jpg\n",
            "Admit card saved as admit_card.png\n",
            "Admit card saved as admit_card.png\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# prompt: create a simple dice game(ludo) with six sides of the dice make it fun game between 2 bayers\n",
        "\n",
        "import random\n",
        "\n",
        "def roll_dice():\n",
        "  return random.randint(1, 6)\n",
        "\n",
        "def play_ludo(player1_name, player2_name):\n",
        "  player1_position = 0\n",
        "  player2_position = 0\n",
        "\n",
        "  while True:\n",
        "    input(f\"{player1_name}, press Enter to roll the dice...\")\n",
        "    player1_roll = roll_dice()\n",
        "    print(f\"{player1_name} rolled a {player1_roll}\")\n",
        "    player1_position += player1_roll\n",
        "\n",
        "    if player1_position >= 50:\n",
        "      print(f\"\\nCongratulations, {player1_name} wins!\")\n",
        "      break\n",
        "\n",
        "    input(f\"{player2_name}, press Enter to roll the dice...\")\n",
        "    player2_roll = roll_dice()\n",
        "    print(f\"{player2_name} rolled a {player2_roll}\")\n",
        "    player2_position += player2_roll\n",
        "\n",
        "    if player2_position >= 50:\n",
        "      print(f\"\\nCongratulations, {player2_name} wins!\")\n",
        "      break\n",
        "\n",
        "    print(f\"\\nCurrent Positions: {player1_name} - {player1_position}, {player2_name} - {player2_position}\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  player1 = input(\"Enter Player 1's name: \")\n",
        "  player2 = input(\"Enter Player 2's name: \")\n",
        "  play_ludo(player1, player2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fW3Rkd1E5Fp9",
        "outputId": "808093d7-c2fc-4f7b-87fb-c2c4c63248ce"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter Player 1's name: FAIZA NAAZ\n",
            "Enter Player 2's name: SHOAIB SHA\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 6\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 1\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 6, SHOAIB SHA - 1\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 4\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 3\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 10, SHOAIB SHA - 4\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 6\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 5\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 16, SHOAIB SHA - 9\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 1\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 4\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 17, SHOAIB SHA - 13\n",
            "FAIZA NAAZ, press Enter to roll the dice...7\n",
            "FAIZA NAAZ rolled a 5\n",
            "SHOAIB SHA, press Enter to roll the dice...W\n",
            "SHOAIB SHA rolled a 3\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 22, SHOAIB SHA - 16\n",
            "FAIZA NAAZ, press Enter to roll the dice...20\n",
            "FAIZA NAAZ rolled a 5\n",
            "SHOAIB SHA, press Enter to roll the dice...30\n",
            "SHOAIB SHA rolled a 1\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 27, SHOAIB SHA - 17\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 3\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 2\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 30, SHOAIB SHA - 19\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 5\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 4\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 35, SHOAIB SHA - 23\n",
            "FAIZA NAAZ rolled a 1\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 2\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 36, SHOAIB SHA - 25\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 3\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 4\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 39, SHOAIB SHA - 29\n",
            "FAIZA NAAZ rolled a 4\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 3\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 43, SHOAIB SHA - 32\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 2\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 5\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 45, SHOAIB SHA - 37\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 2\n",
            "SHOAIB SHA, press Enter to roll the dice...\n",
            "SHOAIB SHA rolled a 6\n",
            "\n",
            "Current Positions: FAIZA NAAZ - 47, SHOAIB SHA - 43\n",
            "FAIZA NAAZ, press Enter to roll the dice...\n",
            "FAIZA NAAZ rolled a 3\n",
            "\n",
            "Congratulations, FAIZA NAAZ wins!\n"
          ]
        }
      ]
    }
  ]
}